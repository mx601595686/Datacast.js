"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventLevel_1 = require("./EventLevel");
function convertEventNameType(eventName = []) {
    if (!Array.isArray(eventName)) {
        if ('string' === typeof eventName) {
            eventName = eventName.split('.');
        }
        else {
            eventName = [eventName];
        }
    }
    return eventName;
}
class EventSpace {
    constructor() {
        this.eventLevel = new EventLevel_1.default();
        this.on = this.receive;
        this.once = this.receiveOnce;
        this.off = this.cancel;
        this.trigger = this.send;
    }
    receive(eventName, receiver) {
        if ('function' !== typeof receiver)
            throw new Error('receiver must be function');
        eventName = convertEventNameType(eventName);
        this.eventLevel.addReceiver(eventName, receiver);
        return receiver;
    }
    receiveOnce(eventName, receiver) {
        if ('function' !== typeof receiver)
            throw new Error('receiver must be function');
        eventName = convertEventNameType(eventName);
        eventName.push(Math.random().toString());
        this.receive(eventName, function (d, p) {
            receiver(d, p);
            this.cancel(eventName);
        }.bind(this));
        return receiver;
    }
    cancel(eventName) {
        eventName = convertEventNameType(eventName);
        this.eventLevel.removeReceiver(eventName);
    }
    send(eventName, data, _this) {
        eventName = convertEventNameType(eventName);
        this.eventLevel.trigger(eventName, data, _this);
    }
}
exports.default = EventSpace;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50U3BhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0M7QUFNdEMsOEJBQThCLFlBQXlCLEVBQUU7SUFDckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQ7SUFBQTtRQUdxQixlQUFVLEdBQUcsSUFBSSxvQkFBVSxFQUFFLENBQUM7UUFTL0MsT0FBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFrQmxCLFNBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBcUJ4QixRQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQWNsQixZQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUt4QixDQUFDO0lBekRHLE9BQU8sQ0FBQyxTQUFzQixFQUFFLFFBQWtCO1FBQzlDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxPQUFPLFFBQVEsQ0FBQztZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFFakQsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqRCxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFVRCxXQUFXLENBQUMsU0FBc0IsRUFBRSxRQUFrQjtRQUNsRCxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssT0FBTyxRQUFRLENBQUM7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBRWpELFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBTSxFQUFFLENBQVE7WUFDOUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBU0QsTUFBTSxDQUFDLFNBQXVCO1FBQzFCLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBV0QsSUFBSSxDQUFDLFNBQXNCLEVBQUUsSUFBUyxFQUFFLEtBQWM7UUFDbEQsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBdEVELDZCQXNFQyIsImZpbGUiOiJFdmVudFNwYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50TGV2ZWwgZnJvbSBcIi4vRXZlbnRMZXZlbFwiO1xyXG5cclxuLyoqXHJcbiAqIOagueaNruinhOWImeWwhuS6i+S7tuWQjei9rOaNouaIkOaVsOe7hOeahOW9ouW8j1xyXG4gKiBAcGFyYW0ge2FueSB8IGFueVtdfSBldmVudE5hbWUg5LqL5Lu25ZCN56ewXHJcbiAqL1xyXG5mdW5jdGlvbiBjb252ZXJ0RXZlbnROYW1lVHlwZShldmVudE5hbWU6IGFueSB8IGFueVtdID0gW10pOiBhbnlbXSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXZlbnROYW1lKSkgeyAgLy/mmK/mlbDnu4TlsLHkuI3nlKjovazmjaLkuoZcclxuICAgICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBldmVudE5hbWUpIHsgICAgLy/mmK/lrZfnrKbkuLLov5jpnIDopoHlsIblrZfnrKbkuLLliIblibLkuIDkuItcclxuICAgICAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXZlbnROYW1lID0gW2V2ZW50TmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBldmVudE5hbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50U3BhY2Uge1xyXG5cclxuICAgIC8v5a+85Ye65LiA5Liq5YWo5bGA5LqL5Lu256m66Ze05ZKM5LiA5Liq5LqL5Lu256m66Ze057G7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50TGV2ZWwgPSBuZXcgRXZlbnRMZXZlbCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5LqL5Lu255uR5ZCs5ZmoXHJcbiAgICAgKiDliKvlkI0gb25cclxuICAgICAqIEBwYXJhbSB7YW55IHwgYW55W119IGV2ZW50TmFtZSDmjqXmlLbkuovku7bnmoTlkI3np7Au5Y+v5Lul5Li65a2X56ym5Liy5oiW5pWw57uEKOWtl+espuS4sumAmui/h+KAmC7igJnmnaXliIblibLlsYLnuqcpXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSByZWNlaXZlciDmjqXmlLbliLDkuovku7blkI7miafooYznmoTlm57osIPlh73mlbAgLOWbnuiwg+WHveaVsOaOpeWPl+S4pOS4quWPguaVsO+8iGRhdGE65pWw5o2u77yMZXZlbnROYW1lOuS6i+S7tueahOWQjeensOaVsOe7hO+8iVxyXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IOi/lOWbniByZWNlaXZlclxyXG4gICAgICovXHJcbiAgICBvbiA9IHRoaXMucmVjZWl2ZTtcclxuICAgIHJlY2VpdmUoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgcmVjZWl2ZXI6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiByZWNlaXZlcikgIC8q6aqM6K+B5pWw5o2u57G75Z6LKi9cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNlaXZlciBtdXN0IGJlIGZ1bmN0aW9uJyk7XHJcblxyXG4gICAgICAgIGV2ZW50TmFtZSA9IGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuZXZlbnRMZXZlbC5hZGRSZWNlaXZlcihldmVudE5hbWUsIHJlY2VpdmVyKTtcclxuICAgICAgICByZXR1cm4gcmVjZWl2ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozlj6rmjqXmlLbkuIDmrKHnmoTkuovku7bnm5HlkKzlmahcclxuICAgICAqIOWIq+WQjSBvbmNlXHJcbiAgICAgKiBAcGFyYW0ge2FueSB8IGFueVtdfSBldmVudE5hbWUg5o6l5pS25LqL5Lu255qE5ZCN56ewLuWPr+S7peS4uuWtl+espuS4suaIluaVsOe7hCjlrZfnrKbkuLLpgJrov4figJgu4oCZ5p2l5YiG5Ymy5bGC57qnKVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVjZWl2ZXIg5o6l5pS25Yiw5pWw5o2u5ZCO5omn6KGM55qE5Zue6LCD5Ye95pWwICzlm57osIPlh73mlbDmjqXlj5fkuKTkuKrlj4LmlbDvvIhkYXRhOuaVsOaNru+8jGV2ZW50TmFtZTrkuovku7bnmoTlkI3np7DmlbDnu4TvvIlcclxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSDov5Tlm54gcmVjZWl2ZXJcclxuICAgICAqL1xyXG4gICAgb25jZSA9IHRoaXMucmVjZWl2ZU9uY2U7XHJcbiAgICByZWNlaXZlT25jZShldmVudE5hbWU6IGFueSB8IGFueVtdLCByZWNlaXZlcjogRnVuY3Rpb24pIHtcclxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHJlY2VpdmVyKSAgLyrpqozor4HmlbDmja7nsbvlnosqL1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlY2VpdmVyIG11c3QgYmUgZnVuY3Rpb24nKTtcclxuXHJcbiAgICAgICAgZXZlbnROYW1lID0gY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lKTtcclxuICAgICAgICBldmVudE5hbWUucHVzaChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkpOyAgLy/noa7kv53lj6rliKDpmaToh6rouqtcclxuXHJcbiAgICAgICAgdGhpcy5yZWNlaXZlKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGQ6IGFueSwgcDogYW55W10pIHtcclxuICAgICAgICAgICAgcmVjZWl2ZXIoZCwgcCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICByZXR1cm4gcmVjZWl2ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jplIDmlbDmja7mjqXmlLblmahcclxuICAgICAqIOWIq+WQjSBvZmZcclxuICAgICAqIEBwYXJhbSB7YW55IHwgYW55W119IGV2ZW50TmFtZSDms6jplIDkuovku7bmjqXmlLblmajnmoTlkI3np7Au5Y+v5Lul5Li65a2X56ym5Liy5oiW5pWw57uEKOWtl+espuS4sumAmui/h+KAmC7igJnmnaXliIblibLlsYLnuqcpXHJcbiAgICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIG9mZiA9IHRoaXMuY2FuY2VsO1xyXG4gICAgY2FuY2VsKGV2ZW50TmFtZT86IGFueSB8IGFueVtdKSB7XHJcbiAgICAgICAgZXZlbnROYW1lID0gY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lKTtcclxuICAgICAgICB0aGlzLmV2ZW50TGV2ZWwucmVtb3ZlUmVjZWl2ZXIoZXZlbnROYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOinpuWPkeaMh+WumueahOS6i+S7tuaOpeaUtuWZqFxyXG4gICAgICog5Yir5ZCNIHRyaWdnZXJcclxuICAgICAqIEBwYXJhbSB7YW55IHwgYW55W119IGV2ZW50TmFtZSDopoHop6blj5HnmoTkuovku7blkI3np7Au5Y+v5Lul5Li65a2X56ym5Liy5oiW5pWw57uEKOWtl+espuS4sumAmui/h+KAmC7igJnmnaXliIblibLlsYLnuqcpXHJcbiAgICAgKiBAcGFyYW0ge2FueX0gZGF0YSDopoHlj5HpgIHnmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBfdGhpcyDopoHkuLrnm5HlkKzlmajnu5HlrprnmoR0aGlz5a+56LGhXHJcbiAgICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXIgPSB0aGlzLnNlbmQ7XHJcbiAgICBzZW5kKGV2ZW50TmFtZTogYW55IHwgYW55W10sIGRhdGE6IGFueSwgX3RoaXM/OiBPYmplY3QpIHtcclxuICAgICAgICBldmVudE5hbWUgPSBjb252ZXJ0RXZlbnROYW1lVHlwZShldmVudE5hbWUpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRMZXZlbC50cmlnZ2VyKGV2ZW50TmFtZSwgZGF0YSwgX3RoaXMpO1xyXG4gICAgfVxyXG59Il19
