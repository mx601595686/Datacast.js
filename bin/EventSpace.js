"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventLevel_1 = require("./EventLevel");
function convertEventNameType(eventName = []) {
    if ('number' === typeof eventName)
        eventName = [eventName.toString()];
    else if ('string' === typeof eventName)
        eventName = eventName.split('.');
    else if (!Array.isArray(eventName))
        throw new Error('eventName must be a string or array');
    return eventName;
}
function receive(eventName, receiver) {
    if (typeof receiver !== 'function')
        throw new Error('receiver is not a function');
    eventName = convertEventNameType(eventName);
    this.eventLevel.addReceiver(eventName, receiver);
    return receiver;
}
function receiveOnce(eventName, receiver) {
    if (typeof receiver !== 'function')
        throw new Error('receiver is not a function');
    eventName = convertEventNameType(eventName);
    eventName.push(Math.random().toString());
    this.receive(eventName, function (d, p) {
        receiver(d, p);
        this.cancel(eventName);
    }.bind(this));
    return receiver;
}
function cancel(eventName) {
    eventName = convertEventNameType(eventName);
    this.eventLevel.removeReceiver(eventName);
}
function send(eventName, data, _this) {
    eventName = convertEventNameType(eventName);
    this.eventLevel.trigger(eventName, data, _this);
}
class EventSpace {
    constructor() {
        this.eventLevel = new EventLevel_1.default();
        this.EventSpace = EventSpace;
        this.on = this.receive = receive.bind(this);
        this.once = this.receiveOnce = receiveOnce.bind(this);
        this.off = this.cancel = cancel.bind(this);
        this.trigger = this.send = send.bind(this);
    }
}
exports.default = EventSpace;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
