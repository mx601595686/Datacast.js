"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventLevel_1 = require("./EventLevel");
function convertEventNameType(eventName = []) {
    if (!Array.isArray(eventName)) {
        if ('string' === typeof eventName) {
            eventName = eventName.split('.');
        }
        else {
            eventName = [eventName];
        }
    }
    return eventName;
}
class EventSpace {
    constructor() {
        this.eventLevel = new EventLevel_1.default();
    }
    receive(eventName, receiver) {
        if ('function' !== typeof receiver)
            throw new Error('receiver must be function');
        eventName = convertEventNameType(eventName);
        this.eventLevel.addReceiver(eventName, receiver);
        return receiver;
    }
    receiveOnce(eventName, receiver) {
        if ('function' !== typeof receiver)
            throw new Error('receiver must be function');
        eventName = convertEventNameType(eventName);
        eventName.push(Math.random().toString());
        this.receive(eventName, function (d, p) {
            receiver(d, p);
            this.cancel(eventName);
        }.bind(this));
        return receiver;
    }
    cancel(eventName) {
        eventName = convertEventNameType(eventName);
        this.eventLevel.removeReceiver(eventName);
    }
    send(eventName, data, _this) {
        eventName = convertEventNameType(eventName);
        this.eventLevel.trigger(eventName, data, _this);
    }
}
exports.default = EventSpace;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50U3BhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0M7QUFNdEMsOEJBQThCLFlBQXlCLEVBQUU7SUFDckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQ7SUFBQTtRQUdxQixlQUFVLEdBQUcsSUFBSSxvQkFBVSxFQUFFLENBQUM7SUErRG5ELENBQUM7SUF0REcsT0FBTyxDQUFDLFNBQXNCLEVBQUUsUUFBa0I7UUFDOUMsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLE9BQU8sUUFBUSxDQUFDO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUVqRCxTQUFTLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQVNELFdBQVcsQ0FBQyxTQUFzQixFQUFFLFFBQWtCO1FBQ2xELEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxPQUFPLFFBQVEsQ0FBQztZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFFakQsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFNLEVBQUUsQ0FBUTtZQUM5QyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDZCxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFRRCxNQUFNLENBQUMsU0FBc0I7UUFDekIsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFVRCxJQUFJLENBQUMsU0FBc0IsRUFBRSxJQUFTLEVBQUUsS0FBYTtRQUNqRCxTQUFTLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0o7QUFsRUQsNkJBa0VDIiwiZmlsZSI6IkV2ZW50U3BhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRMZXZlbCBmcm9tIFwiLi9FdmVudExldmVsXCI7XHJcblxyXG4vKipcclxuICog5qC55o2u6KeE5YiZ5bCG5LqL5Lu25ZCN6L2s5o2i5oiQ5pWw57uE55qE5b2i5byPXHJcbiAqIEBwYXJhbSB7YW55IHwgYW55W119IGV2ZW50TmFtZSDkuovku7blkI3np7BcclxuICovXHJcbmZ1bmN0aW9uIGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZTogYW55IHwgYW55W10gPSBbXSk6IGFueVtdIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShldmVudE5hbWUpKSB7ICAvL+aYr+aVsOe7hOWwseS4jeeUqOi9rOaNouS6hlxyXG4gICAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGV2ZW50TmFtZSkgeyAgICAvL+aYr+Wtl+espuS4sui/mOmcgOimgeWwhuWtl+espuS4suWIhuWJsuS4gOS4i1xyXG4gICAgICAgICAgICBldmVudE5hbWUgPSBldmVudE5hbWUuc3BsaXQoJy4nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBldmVudE5hbWUgPSBbZXZlbnROYW1lXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV2ZW50TmFtZTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRTcGFjZSB7XHJcblxyXG4gICAgLy/lr7zlh7rkuIDkuKrlhajlsYDkuovku7bnqbrpl7TlkozkuIDkuKrkuovku7bnqbrpl7TnsbtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRMZXZlbCA9IG5ldyBFdmVudExldmVsKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozkuovku7bnm5HlkKzlmahcclxuICAgICAqIOWIq+WQjSBvblxyXG4gICAgICogQHBhcmFtIHthbnkgfCBhbnlbXX0gZXZlbnROYW1lIOaOpeaUtuS6i+S7tueahOWQjeensC7lj6/ku6XkuLrlrZfnrKbkuLLmiJbmlbDnu4Qo5a2X56ym5Liy6YCa6L+H4oCYLuKAmeadpeWIhuWJsuWxgue6pylcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlY2VpdmVyIOaOpeaUtuWIsOS6i+S7tuWQjuaJp+ihjOeahOWbnuiwg+WHveaVsCAs5Zue6LCD5Ye95pWw5o6l5Y+X5Lik5Liq5Y+C5pWw77yIZGF0YTrmlbDmja7vvIxldmVudE5hbWU65LqL5Lu255qE5ZCN56ew5pWw57uE77yJXHJcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0g6L+U5ZueIHJlY2VpdmVyXHJcbiAgICAgKi9cclxuICAgIHJlY2VpdmUoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgcmVjZWl2ZXI6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiByZWNlaXZlcikgIC8q6aqM6K+B5pWw5o2u57G75Z6LKi9cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNlaXZlciBtdXN0IGJlIGZ1bmN0aW9uJyk7XHJcblxyXG4gICAgICAgIGV2ZW50TmFtZSA9IGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuZXZlbnRMZXZlbC5hZGRSZWNlaXZlcihldmVudE5hbWUsIHJlY2VpdmVyKTtcclxuICAgICAgICByZXR1cm4gcmVjZWl2ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozlj6rmjqXmlLbkuIDmrKHnmoTkuovku7bnm5HlkKzlmahcclxuICAgICAqIOWIq+WQjSBvbmNlXHJcbiAgICAgKiBAcGFyYW0ge2FueSB8IGFueVtdfSBldmVudE5hbWUg5o6l5pS25LqL5Lu255qE5ZCN56ewLuWPr+S7peS4uuWtl+espuS4suaIluaVsOe7hCjlrZfnrKbkuLLpgJrov4figJgu4oCZ5p2l5YiG5Ymy5bGC57qnKVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVjZWl2ZXIg5o6l5pS25Yiw5pWw5o2u5ZCO5omn6KGM55qE5Zue6LCD5Ye95pWwICzlm57osIPlh73mlbDmjqXlj5fkuKTkuKrlj4LmlbDvvIhkYXRhOuaVsOaNru+8jGV2ZW50TmFtZTrkuovku7bnmoTlkI3np7DmlbDnu4TvvIlcclxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSDov5Tlm54gcmVjZWl2ZXJcclxuICAgICAqL1xyXG4gICAgcmVjZWl2ZU9uY2UoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgcmVjZWl2ZXI6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiByZWNlaXZlcikgIC8q6aqM6K+B5pWw5o2u57G75Z6LKi9cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNlaXZlciBtdXN0IGJlIGZ1bmN0aW9uJyk7XHJcblxyXG4gICAgICAgIGV2ZW50TmFtZSA9IGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgZXZlbnROYW1lLnB1c2goTWF0aC5yYW5kb20oKS50b1N0cmluZygpKTsgIC8v56Gu5L+d5Y+q5Yig6Zmk6Ieq6LqrXHJcblxyXG4gICAgICAgIHRoaXMucmVjZWl2ZShldmVudE5hbWUsIGZ1bmN0aW9uIChkOiBhbnksIHA6IGFueVtdKSB7XHJcbiAgICAgICAgICAgIHJlY2VpdmVyKGQsIHApO1xyXG4gICAgICAgICAgICB0aGlzLmNhbmNlbChldmVudE5hbWUpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlY2VpdmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo6ZSA5pWw5o2u5o6l5pS25ZmoXHJcbiAgICAgKiDliKvlkI0gb2ZmXHJcbiAgICAgKiBAcGFyYW0ge2FueSB8IGFueVtdfSBldmVudE5hbWUg5rOo6ZSA5LqL5Lu25o6l5pS25Zmo55qE5ZCN56ewLuWPr+S7peS4uuWtl+espuS4suaIluaVsOe7hCjlrZfnrKbkuLLpgJrov4figJgu4oCZ5p2l5YiG5Ymy5bGC57qnKVxyXG4gICAgICogQHJldHVybiB7dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBjYW5jZWwoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSkge1xyXG4gICAgICAgIGV2ZW50TmFtZSA9IGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgdGhpcy5ldmVudExldmVsLnJlbW92ZVJlY2VpdmVyKGV2ZW50TmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop6blj5HmjIflrprnmoTkuovku7bmjqXmlLblmahcclxuICAgICAqIOWIq+WQjSB0cmlnZ2VyXHJcbiAgICAgKiBAcGFyYW0ge2FueSB8IGFueVtdfSBldmVudE5hbWUg6KaB6Kem5Y+R55qE5LqL5Lu25ZCN56ewLuWPr+S7peS4uuWtl+espuS4suaIluaVsOe7hCjlrZfnrKbkuLLpgJrov4figJgu4oCZ5p2l5YiG5Ymy5bGC57qnKVxyXG4gICAgICogQHBhcmFtIHthbnl9IGRhdGEg6KaB5Y+R6YCB55qE5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gX3RoaXMg6KaB5Li655uR5ZCs5Zmo57uR5a6a55qEdGhpc+WvueixoVxyXG4gICAgICogQHJldHVybiB7dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBzZW5kKGV2ZW50TmFtZTogYW55IHwgYW55W10sIGRhdGE6IGFueSwgX3RoaXM6IE9iamVjdCkge1xyXG4gICAgICAgIGV2ZW50TmFtZSA9IGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgdGhpcy5ldmVudExldmVsLnRyaWdnZXIoZXZlbnROYW1lLCBkYXRhLCBfdGhpcyk7XHJcbiAgICB9XHJcbn0iXX0=
