"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventLevel_1 = require("./EventLevel");
function convertEventNameType(eventName = []) {
    if (!Array.isArray(eventName)) {
        if ('string' === typeof eventName) {
            eventName = eventName.split('.');
        }
        else {
            eventName = [eventName];
        }
    }
    return eventName;
}
class EventSpace {
    constructor() {
        this.eventLevel = new EventLevel_1.default();
        this.receive = (eventName, receiver) => {
            if ('function' !== typeof receiver)
                throw new Error('receiver must be function');
            eventName = convertEventNameType(eventName);
            this.eventLevel.addReceiver(eventName, receiver);
            return receiver;
        };
        this.on = this.receive;
        this.receiveOnce = (eventName, receiver) => {
            if ('function' !== typeof receiver)
                throw new Error('receiver must be function');
            eventName = convertEventNameType(eventName);
            eventName.push(Math.random().toString());
            this.receive(eventName, function (d, p) {
                receiver(d, p);
                this.cancel(eventName);
            }.bind(this));
            return receiver;
        };
        this.once = this.receiveOnce;
        this.cancel = (eventName) => {
            eventName = convertEventNameType(eventName);
            this.eventLevel.removeReceiver(eventName);
        };
        this.off = this.cancel;
        this.send = (eventName, data, _this) => {
            eventName = convertEventNameType(eventName);
            this.eventLevel.trigger(eventName, data, _this);
        };
        this.trigger = this.send;
    }
}
exports.default = EventSpace;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50U3BhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0M7QUFNdEMsOEJBQThCLFlBQXlCLEVBQUU7SUFDckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQ7SUFBQTtRQUVxQixlQUFVLEdBQUcsSUFBSSxvQkFBVSxFQUFFLENBQUM7UUFTL0MsWUFBTyxHQUFHLENBQUMsU0FBc0IsRUFBRSxRQUFrQjtZQUNqRCxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssT0FBTyxRQUFRLENBQUM7Z0JBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUVqRCxTQUFTLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDcEIsQ0FBQyxDQUFBO1FBQ0QsT0FBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFTbEIsZ0JBQVcsR0FBRyxDQUFDLFNBQXNCLEVBQUUsUUFBa0I7WUFDckQsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLE9BQU8sUUFBUSxDQUFDO2dCQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFFakQsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFFekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFNLEVBQUUsQ0FBUTtnQkFDOUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDZixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNkLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDcEIsQ0FBQyxDQUFBO1FBQ0QsU0FBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFReEIsV0FBTSxHQUFHLENBQUMsU0FBdUI7WUFDN0IsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQTtRQUNELFFBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBVWxCLFNBQUksR0FBRyxDQUFDLFNBQXNCLEVBQUUsSUFBUyxFQUFFLEtBQWM7WUFDckQsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFBO1FBQ0QsWUFBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDeEIsQ0FBQztDQUFBO0FBckVELDZCQXFFQyIsImZpbGUiOiJFdmVudFNwYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50TGV2ZWwgZnJvbSBcIi4vRXZlbnRMZXZlbFwiO1xyXG5cclxuLyoqXHJcbiAqIOagueaNruinhOWImeWwhuS6i+S7tuWQjei9rOaNouaIkOaVsOe7hOeahOW9ouW8j1xyXG4gKiBAcGFyYW0ge2FueSB8IGFueVtdfSBldmVudE5hbWUg5LqL5Lu25ZCN56ewXHJcbiAqL1xyXG5mdW5jdGlvbiBjb252ZXJ0RXZlbnROYW1lVHlwZShldmVudE5hbWU6IGFueSB8IGFueVtdID0gW10pOiBhbnlbXSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXZlbnROYW1lKSkgeyAgLy/mmK/mlbDnu4TlsLHkuI3nlKjovazmjaLkuoZcclxuICAgICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBldmVudE5hbWUpIHsgICAgLy/mmK/lrZfnrKbkuLLov5jpnIDopoHlsIblrZfnrKbkuLLliIblibLkuIDkuItcclxuICAgICAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXZlbnROYW1lID0gW2V2ZW50TmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBldmVudE5hbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50U3BhY2Uge1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRMZXZlbCA9IG5ldyBFdmVudExldmVsKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozkuovku7bnm5HlkKzlmahcclxuICAgICAqIOWIq+WQjSBvblxyXG4gICAgICogQHBhcmFtIHthbnkgfCBhbnlbXX0gZXZlbnROYW1lIOaOpeaUtuS6i+S7tueahOWQjeensC7lj6/ku6XkuLrlrZfnrKbkuLLmiJbmlbDnu4Qo5a2X56ym5Liy6YCa6L+H4oCYLuKAmeadpeWIhuWJsuWxgue6pylcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlY2VpdmVyIOaOpeaUtuWIsOS6i+S7tuWQjuaJp+ihjOeahOWbnuiwg+WHveaVsCAs5Zue6LCD5Ye95pWw5o6l5Y+X5Lik5Liq5Y+C5pWw77yIZGF0YTrmlbDmja7vvIxldmVudE5hbWU65LqL5Lu255qE5ZCN56ew5pWw57uE77yJXHJcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0g6L+U5ZueIHJlY2VpdmVyXHJcbiAgICAgKi9cclxuICAgIHJlY2VpdmUgPSAoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgcmVjZWl2ZXI6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiByZWNlaXZlcikgIC8q6aqM6K+B5pWw5o2u57G75Z6LKi9cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNlaXZlciBtdXN0IGJlIGZ1bmN0aW9uJyk7XHJcblxyXG4gICAgICAgIGV2ZW50TmFtZSA9IGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSk7XHJcblxyXG4gICAgICAgIHRoaXMuZXZlbnRMZXZlbC5hZGRSZWNlaXZlcihldmVudE5hbWUsIHJlY2VpdmVyKTtcclxuICAgICAgICByZXR1cm4gcmVjZWl2ZXI7XHJcbiAgICB9XHJcbiAgICBvbiA9IHRoaXMucmVjZWl2ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOazqOWGjOWPquaOpeaUtuS4gOasoeeahOS6i+S7tuebkeWQrOWZqFxyXG4gICAgICog5Yir5ZCNIG9uY2VcclxuICAgICAqIEBwYXJhbSB7YW55IHwgYW55W119IGV2ZW50TmFtZSDmjqXmlLbkuovku7bnmoTlkI3np7Au5Y+v5Lul5Li65a2X56ym5Liy5oiW5pWw57uEKOWtl+espuS4sumAmui/h+KAmC7igJnmnaXliIblibLlsYLnuqcpXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSByZWNlaXZlciDmjqXmlLbliLDmlbDmja7lkI7miafooYznmoTlm57osIPlh73mlbAgLOWbnuiwg+WHveaVsOaOpeWPl+S4pOS4quWPguaVsO+8iGRhdGE65pWw5o2u77yMZXZlbnROYW1lOuS6i+S7tueahOWQjeensOaVsOe7hO+8iVxyXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IOi/lOWbniByZWNlaXZlclxyXG4gICAgICovXHJcbiAgICByZWNlaXZlT25jZSA9IChldmVudE5hbWU6IGFueSB8IGFueVtdLCByZWNlaXZlcjogRnVuY3Rpb24pID0+IHtcclxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHJlY2VpdmVyKSAgLyrpqozor4HmlbDmja7nsbvlnosqL1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlY2VpdmVyIG11c3QgYmUgZnVuY3Rpb24nKTtcclxuXHJcbiAgICAgICAgZXZlbnROYW1lID0gY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lKTtcclxuICAgICAgICBldmVudE5hbWUucHVzaChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkpOyAgLy/noa7kv53lj6rliKDpmaToh6rouqtcclxuXHJcbiAgICAgICAgdGhpcy5yZWNlaXZlKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGQ6IGFueSwgcDogYW55W10pIHtcclxuICAgICAgICAgICAgcmVjZWl2ZXIoZCwgcCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICByZXR1cm4gcmVjZWl2ZXI7XHJcbiAgICB9XHJcbiAgICBvbmNlID0gdGhpcy5yZWNlaXZlT25jZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOazqOmUgOaVsOaNruaOpeaUtuWZqFxyXG4gICAgICog5Yir5ZCNIG9mZlxyXG4gICAgICogQHBhcmFtIHthbnkgfCBhbnlbXX0gZXZlbnROYW1lIOazqOmUgOS6i+S7tuaOpeaUtuWZqOeahOWQjeensC7lj6/ku6XkuLrlrZfnrKbkuLLmiJbmlbDnu4Qo5a2X56ym5Liy6YCa6L+H4oCYLuKAmeadpeWIhuWJsuWxgue6pylcclxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgY2FuY2VsID0gKGV2ZW50TmFtZT86IGFueSB8IGFueVtdKSA9PiB7XHJcbiAgICAgICAgZXZlbnROYW1lID0gY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lKTtcclxuICAgICAgICB0aGlzLmV2ZW50TGV2ZWwucmVtb3ZlUmVjZWl2ZXIoZXZlbnROYW1lKTtcclxuICAgIH1cclxuICAgIG9mZiA9IHRoaXMuY2FuY2VsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6Kem5Y+R5oyH5a6a55qE5LqL5Lu25o6l5pS25ZmoXHJcbiAgICAgKiDliKvlkI0gdHJpZ2dlclxyXG4gICAgICogQHBhcmFtIHthbnkgfCBhbnlbXX0gZXZlbnROYW1lIOimgeinpuWPkeeahOS6i+S7tuWQjeensC7lj6/ku6XkuLrlrZfnrKbkuLLmiJbmlbDnu4Qo5a2X56ym5Liy6YCa6L+H4oCYLuKAmeadpeWIhuWJsuWxgue6pylcclxuICAgICAqIEBwYXJhbSB7YW55fSBkYXRhIOimgeWPkemAgeeahOaVsOaNrlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IF90aGlzIOimgeS4uuebkeWQrOWZqOe7keWumueahHRoaXPlr7nosaFcclxuICAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgc2VuZCA9IChldmVudE5hbWU6IGFueSB8IGFueVtdLCBkYXRhOiBhbnksIF90aGlzPzogT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgZXZlbnROYW1lID0gY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lKTtcclxuICAgICAgICB0aGlzLmV2ZW50TGV2ZWwudHJpZ2dlcihldmVudE5hbWUsIGRhdGEsIF90aGlzKTtcclxuICAgIH1cclxuICAgIHRyaWdnZXIgPSB0aGlzLnNlbmQ7XHJcbn0iXX0=
