"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventLevel_1 = require("./EventLevel");
function convertEventNameType(eventName) {
    if (eventName === void 0) { eventName = []; }
    if (!Array.isArray(eventName)) {
        if ('string' === typeof eventName) {
            eventName = eventName.split('.');
        }
        else {
            eventName = [eventName];
        }
    }
    return eventName;
}
var EventSpace = (function () {
    function EventSpace() {
        var _this = this;
        this.eventLevel = new EventLevel_1.default();
        this.receive = function (eventName, receiver) {
            if ('function' !== typeof receiver)
                throw new Error('receiver must be function');
            eventName = convertEventNameType(eventName);
            _this.eventLevel.addReceiver(eventName, receiver);
            return receiver;
        };
        this.on = this.receive;
        this.receiveOnce = function (eventName, receiver) {
            if ('function' !== typeof receiver)
                throw new Error('receiver must be function');
            eventName = convertEventNameType(eventName);
            eventName.push(Math.random().toString());
            _this.receive(eventName, function (d, p) {
                receiver(d, p);
                this.cancel(eventName);
            }.bind(_this));
            return receiver;
        };
        this.once = this.receiveOnce;
        this.cancel = function (eventName) {
            eventName = convertEventNameType(eventName);
            _this.eventLevel.removeReceiver(eventName);
        };
        this.off = this.cancel;
        this.send = function (eventName, data, _this_) {
            eventName = convertEventNameType(eventName);
            _this.eventLevel.trigger(eventName, data, _this_);
        };
        this.trigger = this.send;
    }
    return EventSpace;
}());
exports.default = EventSpace;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50U3BhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBc0M7QUFNdEMsOEJBQThCLFNBQTJCO0lBQTNCLDBCQUFBLEVBQUEsY0FBMkI7SUFDckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBY0Q7SUFBQTtRQUFBLGlCQXFFQztRQW5Fb0IsZUFBVSxHQUFHLElBQUksb0JBQVUsRUFBRSxDQUFDO1FBUy9DLFlBQU8sR0FBRyxVQUFDLFNBQXNCLEVBQUUsUUFBa0I7WUFDakQsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLE9BQU8sUUFBUSxDQUFDO2dCQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFFakQsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTVDLEtBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3BCLENBQUMsQ0FBQTtRQUNELE9BQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBU2xCLGdCQUFXLEdBQUcsVUFBQyxTQUFzQixFQUFFLFFBQWtCO1lBQ3JELEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxPQUFPLFFBQVEsQ0FBQztnQkFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBRWpELFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1QyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBRXpDLEtBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBTSxFQUFFLENBQVE7Z0JBQzlDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUM7WUFDZCxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3BCLENBQUMsQ0FBQTtRQUNELFNBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBUXhCLFdBQU0sR0FBRyxVQUFDLFNBQXVCO1lBQzdCLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1QyxLQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUE7UUFDRCxRQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQVVsQixTQUFJLEdBQUcsVUFBQyxTQUFzQixFQUFFLElBQVMsRUFBRSxNQUFlO1lBQ3RELFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1QyxLQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQTtRQUNELFlBQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFBRCxpQkFBQztBQUFELENBckVBLEFBcUVDLElBQUEiLCJmaWxlIjoiRXZlbnRTcGFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudExldmVsIGZyb20gXCIuL0V2ZW50TGV2ZWxcIjtcclxuXHJcbi8qKlxyXG4gKiDmoLnmja7op4TliJnlsIbkuovku7blkI3ovazmjaLmiJDmlbDnu4TnmoTlvaLlvI9cclxuICogQHBhcmFtIHthbnkgfCBhbnlbXX0gZXZlbnROYW1lIOS6i+S7tuWQjeensFxyXG4gKi9cclxuZnVuY3Rpb24gY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSA9IFtdKTogYW55W10ge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGV2ZW50TmFtZSkpIHsgIC8v5piv5pWw57uE5bCx5LiN55So6L2s5o2i5LqGXHJcbiAgICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgZXZlbnROYW1lKSB7ICAgIC8v5piv5a2X56ym5Liy6L+Y6ZyA6KaB5bCG5a2X56ym5Liy5YiG5Ymy5LiA5LiLXHJcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZS5zcGxpdCgnLicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IFtldmVudE5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXZlbnROYW1lO1xyXG59XHJcblxyXG4vL+eUqOS6juaWueS+v+aJi+W3pee8luWGmea1j+iniOWZqOeJiOWjsOaYjuaWh+S7tlxyXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U3BhY2VTdHJ1Y3R1cmUge1xyXG4gICAgb246IChldmVudE5hbWU6IGFueSB8IGFueVtdLCByZWNlaXZlcjogRnVuY3Rpb24pID0+IEZ1bmN0aW9uO1xyXG4gICAgcmVjZWl2ZTogKGV2ZW50TmFtZTogYW55IHwgYW55W10sIHJlY2VpdmVyOiBGdW5jdGlvbikgPT4gRnVuY3Rpb247XHJcbiAgICBvbmNlOiAoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgcmVjZWl2ZXI6IEZ1bmN0aW9uKSA9PiBGdW5jdGlvbjtcclxuICAgIHJlY2VpdmVPbmNlOiAoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgcmVjZWl2ZXI6IEZ1bmN0aW9uKSA9PiBGdW5jdGlvbjtcclxuICAgIG9mZjogKGV2ZW50TmFtZT86IGFueSB8IGFueVtdKSA9PiB2b2lkO1xyXG4gICAgY2FuY2VsOiAoZXZlbnROYW1lPzogYW55IHwgYW55W10pID0+IHZvaWQ7XHJcbiAgICB0cmlnZ2VyOiAoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgZGF0YTogYW55LCBfdGhpc18/OiBPYmplY3QpID0+IHZvaWQ7XHJcbiAgICBzZW5kOiAoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgZGF0YTogYW55LCBfdGhpc18/OiBPYmplY3QpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50U3BhY2UgaW1wbGVtZW50cyBFdmVudFNwYWNlU3RydWN0dXJlIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50TGV2ZWwgPSBuZXcgRXZlbnRMZXZlbCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5LqL5Lu255uR5ZCs5ZmoXHJcbiAgICAgKiDliKvlkI0gb25cclxuICAgICAqIEBwYXJhbSB7YW55IHwgYW55W119IGV2ZW50TmFtZSDmjqXmlLbkuovku7bnmoTlkI3np7Au5Y+v5Lul5Li65a2X56ym5Liy5oiW5pWw57uEKOWtl+espuS4sumAmui/h+KAmC7igJnmnaXliIblibLlsYLnuqcpXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSByZWNlaXZlciDmjqXmlLbliLDkuovku7blkI7miafooYznmoTlm57osIPlh73mlbAgLOWbnuiwg+WHveaVsOaOpeWPl+S4pOS4quWPguaVsO+8iGRhdGE65pWw5o2u77yMZXZlbnROYW1lOuS6i+S7tueahOWQjeensOaVsOe7hO+8iVxyXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IOi/lOWbniByZWNlaXZlclxyXG4gICAgICovXHJcbiAgICByZWNlaXZlID0gKGV2ZW50TmFtZTogYW55IHwgYW55W10sIHJlY2VpdmVyOiBGdW5jdGlvbikgPT4ge1xyXG4gICAgICAgIGlmICgnZnVuY3Rpb24nICE9PSB0eXBlb2YgcmVjZWl2ZXIpICAvKumqjOivgeaVsOaNruexu+WeiyovXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmVjZWl2ZXIgbXVzdCBiZSBmdW5jdGlvbicpO1xyXG5cclxuICAgICAgICBldmVudE5hbWUgPSBjb252ZXJ0RXZlbnROYW1lVHlwZShldmVudE5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLmV2ZW50TGV2ZWwuYWRkUmVjZWl2ZXIoZXZlbnROYW1lLCByZWNlaXZlcik7XHJcbiAgICAgICAgcmV0dXJuIHJlY2VpdmVyO1xyXG4gICAgfVxyXG4gICAgb24gPSB0aGlzLnJlY2VpdmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozlj6rmjqXmlLbkuIDmrKHnmoTkuovku7bnm5HlkKzlmahcclxuICAgICAqIOWIq+WQjSBvbmNlXHJcbiAgICAgKiBAcGFyYW0ge2FueSB8IGFueVtdfSBldmVudE5hbWUg5o6l5pS25LqL5Lu255qE5ZCN56ewLuWPr+S7peS4uuWtl+espuS4suaIluaVsOe7hCjlrZfnrKbkuLLpgJrov4figJgu4oCZ5p2l5YiG5Ymy5bGC57qnKVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVjZWl2ZXIg5o6l5pS25Yiw5pWw5o2u5ZCO5omn6KGM55qE5Zue6LCD5Ye95pWwICzlm57osIPlh73mlbDmjqXlj5fkuKTkuKrlj4LmlbDvvIhkYXRhOuaVsOaNru+8jGV2ZW50TmFtZTrkuovku7bnmoTlkI3np7DmlbDnu4TvvIlcclxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSDov5Tlm54gcmVjZWl2ZXJcclxuICAgICAqL1xyXG4gICAgcmVjZWl2ZU9uY2UgPSAoZXZlbnROYW1lOiBhbnkgfCBhbnlbXSwgcmVjZWl2ZXI6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiByZWNlaXZlcikgIC8q6aqM6K+B5pWw5o2u57G75Z6LKi9cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNlaXZlciBtdXN0IGJlIGZ1bmN0aW9uJyk7XHJcblxyXG4gICAgICAgIGV2ZW50TmFtZSA9IGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgZXZlbnROYW1lLnB1c2goTWF0aC5yYW5kb20oKS50b1N0cmluZygpKTsgIC8v56Gu5L+d5Y+q5Yig6Zmk6Ieq6LqrXHJcblxyXG4gICAgICAgIHRoaXMucmVjZWl2ZShldmVudE5hbWUsIGZ1bmN0aW9uIChkOiBhbnksIHA6IGFueVtdKSB7XHJcbiAgICAgICAgICAgIHJlY2VpdmVyKGQsIHApO1xyXG4gICAgICAgICAgICB0aGlzLmNhbmNlbChldmVudE5hbWUpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlY2VpdmVyO1xyXG4gICAgfVxyXG4gICAgb25jZSA9IHRoaXMucmVjZWl2ZU9uY2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jplIDmlbDmja7mjqXmlLblmahcclxuICAgICAqIOWIq+WQjSBvZmZcclxuICAgICAqIEBwYXJhbSB7YW55IHwgYW55W119IGV2ZW50TmFtZSDms6jplIDkuovku7bmjqXmlLblmajnmoTlkI3np7Au5Y+v5Lul5Li65a2X56ym5Liy5oiW5pWw57uEKOWtl+espuS4sumAmui/h+KAmC7igJnmnaXliIblibLlsYLnuqcpXHJcbiAgICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIGNhbmNlbCA9IChldmVudE5hbWU/OiBhbnkgfCBhbnlbXSkgPT4ge1xyXG4gICAgICAgIGV2ZW50TmFtZSA9IGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSk7XHJcbiAgICAgICAgdGhpcy5ldmVudExldmVsLnJlbW92ZVJlY2VpdmVyKGV2ZW50TmFtZSk7XHJcbiAgICB9XHJcbiAgICBvZmYgPSB0aGlzLmNhbmNlbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOinpuWPkeaMh+WumueahOS6i+S7tuaOpeaUtuWZqFxyXG4gICAgICog5Yir5ZCNIHRyaWdnZXJcclxuICAgICAqIEBwYXJhbSB7YW55IHwgYW55W119IGV2ZW50TmFtZSDopoHop6blj5HnmoTkuovku7blkI3np7Au5Y+v5Lul5Li65a2X56ym5Liy5oiW5pWw57uEKOWtl+espuS4sumAmui/h+KAmC7igJnmnaXliIblibLlsYLnuqcpXHJcbiAgICAgKiBAcGFyYW0ge2FueX0gZGF0YSDopoHlj5HpgIHnmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBfdGhpc18g6KaB5Li655uR5ZCs5Zmo57uR5a6a55qEdGhpc+WvueixoVxyXG4gICAgICogQHJldHVybiB7dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICBzZW5kID0gKGV2ZW50TmFtZTogYW55IHwgYW55W10sIGRhdGE6IGFueSwgX3RoaXNfPzogT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgZXZlbnROYW1lID0gY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lKTtcclxuICAgICAgICB0aGlzLmV2ZW50TGV2ZWwudHJpZ2dlcihldmVudE5hbWUsIGRhdGEsIF90aGlzXyk7XHJcbiAgICB9XHJcbiAgICB0cmlnZ2VyID0gdGhpcy5zZW5kO1xyXG59Il19
