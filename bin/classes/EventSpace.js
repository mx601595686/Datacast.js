"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventLevel_1 = require("./EventLevel");
class EventSpace {
    constructor() {
        this._eventLevel = new EventLevel_1.EventLevel();
        this.receive = (eventName, listener) => {
            this._eventLevel
                .getChildLevel(EventSpace.convertEventNameType(eventName), true)
                .receivers.add(listener);
            return listener;
        };
        this.on = this.receive;
        this.receiveOnce = (eventName, listener) => {
            const level = this._eventLevel.getChildLevel(EventSpace.convertEventNameType(eventName), true);
            level.receivers.add(function once(data) {
                listener(data);
                level.receivers.delete(once);
            });
            return listener;
        };
        this.once = this.receiveOnce;
        this.cancel = (eventName = [], listener) => {
            const level = this._eventLevel.getChildLevel(EventSpace.convertEventNameType(eventName), false);
            if (level !== undefined)
                if (listener !== undefined)
                    level.receivers.delete(listener);
                else
                    level.receivers.clear();
        };
        this.off = this.cancel;
        this.cancelDescendants = (eventName = [], includeSelf = true) => {
            const level = this._eventLevel.getChildLevel(EventSpace.convertEventNameType(eventName), false);
            if (level !== undefined) {
                if (includeSelf)
                    level.receivers.clear();
                level.children.clear();
            }
        };
        this.offDescendants = this.cancelDescendants;
        this.cancelAncestors = (eventName = [], includeSelf = true) => {
            let level = this._eventLevel;
            for (const currentName of EventSpace.convertEventNameType(eventName)) {
                level.receivers.clear();
                const currentLevel = level.children.get(currentName);
                if (currentLevel !== undefined)
                    level = currentLevel;
                else
                    return;
            }
            if (includeSelf)
                level.receivers.clear();
        };
        this.offAncestors = this.cancelAncestors;
        this.trigger = (eventName, data, asynchronous) => {
            const level = this._eventLevel.getChildLevel(EventSpace.convertEventNameType(eventName), false);
            if (level !== undefined)
                level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
        };
        this.send = this.trigger;
        this.triggerDescendants = (eventName, data, includeSelf = true, asynchronous) => {
            const level = this._eventLevel.getChildLevel(EventSpace.convertEventNameType(eventName), false);
            if (level !== undefined) {
                if (includeSelf)
                    level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
                function triggerChildren(level) {
                    level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
                    level.children.forEach(triggerChildren);
                }
                level.children.forEach(triggerChildren);
            }
        };
        this.sendDescendants = this.triggerDescendants;
        this.triggerAncestors = (eventName, data, includeSelf = true, asynchronous) => {
            let level = this._eventLevel;
            for (const currentName of EventSpace.convertEventNameType(eventName)) {
                level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
                const currentLevel = level.children.get(currentName);
                if (currentLevel !== undefined)
                    level = currentLevel;
                else
                    return;
            }
            if (includeSelf)
                level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
        };
        this.sendAncestors = this.triggerAncestors;
        this.has = (eventName, listener) => {
            const level = this._eventLevel.getChildLevel(EventSpace.convertEventNameType(eventName), false);
            if (level !== undefined) {
                if (listener !== undefined)
                    return level.receivers.has(listener);
                else
                    return level.receivers.size > 0;
            }
            else
                return false;
        };
        this.hasDescendants = (eventName, includeSelf = true) => {
            const level = this._eventLevel.getChildLevel(EventSpace.convertEventNameType(eventName), false);
            if (level !== undefined) {
                if (includeSelf && level.receivers.size > 0)
                    return true;
                function checkChildren(level) {
                    if (level.receivers.size > 0) {
                        return true;
                    }
                    else {
                        for (const item of level.children.values())
                            if (checkChildren(item))
                                return true;
                        return false;
                    }
                }
                for (const item of level.children.values())
                    if (checkChildren(item))
                        return true;
                return false;
            }
            else
                return false;
        };
        this.hasAncestors = (eventName, includeSelf = true) => {
            let level = this._eventLevel;
            for (const currentName of EventSpace.convertEventNameType(eventName)) {
                if (level.receivers.size > 0)
                    return true;
                const currentLevel = level.children.get(currentName);
                if (currentLevel !== undefined)
                    level = currentLevel;
                else
                    return false;
            }
            if (includeSelf)
                return level.receivers.size > 0;
            else
                return false;
        };
    }
    /**
     * 将事件名转换成数组的形式
     * @param eventName 事件名称
     */
    static convertEventNameType(eventName) {
        return Array.isArray(eventName) ? eventName : eventName.split('.');
    }
}
exports.EventSpace = EventSpace;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
