"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventLevel_1 = require("./EventLevel");
class EventSpace {
    constructor() {
        this._eventLevel = new EventLevel_1.EventLevel();
        this.receive = (eventName, listener) => {
            this._eventLevel
                .getChild(EventSpace.convertEventNameType(eventName), true)
                .receivers.add(listener);
            return listener;
        };
        this.on = this.receive;
        this.receiveOnce = (eventName, listener) => {
            const level = this._eventLevel.getChild(EventSpace.convertEventNameType(eventName), true);
            level.receivers.add(function once(data) {
                listener(data);
                level.receivers.delete(once);
            });
            return listener;
        };
        this.once = this.receiveOnce;
        this.off = this.cancel;
        this.send = this.trigger;
    }
    /**
     * 将事件名转换成数组的形式
     * @param eventName 事件名称
     */
    static convertEventNameType(eventName) {
        return 'string' === typeof eventName ? eventName.split('.') : eventName;
    }
    cancel(eventName = [], lrc = true) {
        const level = this._eventLevel.getChild(EventSpace.convertEventNameType(eventName), false);
        if (level !== undefined) {
            if (lrc === true) {
                level.receivers.clear();
                level.children.clear();
            }
            else if (lrc === false) {
                level.receivers.clear();
            }
            else {
                level.receivers.delete(lrc);
            }
        }
    }
    trigger(eventName, data, includeChildren = true, asynchronous) {
        const level = this._eventLevel.getChild(EventSpace.convertEventNameType(eventName), false);
        if (level !== undefined) {
            level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
            if (includeChildren) {
                function triggerChildren(level) {
                    level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
                    level.children.forEach(triggerChildren);
                }
                level.children.forEach(triggerChildren);
            }
        }
    }
    has(eventName, lrc = true) {
        const level = this._eventLevel.getChild(EventSpace.convertEventNameType(eventName), false);
        if (level === undefined) {
            return false;
        }
        else {
            if (lrc === true) {
                function checkChildren(level) {
                    if (level.receivers.size > 0)
                        return true;
                    else {
                        for (const item of level.children.values()) {
                            if (checkChildren(item) === true)
                                return true;
                        }
                        return false;
                    }
                }
                return checkChildren(level);
            }
            else if (lrc === false) {
                return level.receivers.size > 0;
            }
            else {
                return level.receivers.has(lrc);
            }
        }
    }
}
exports.EventSpace = EventSpace;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
