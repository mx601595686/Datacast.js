"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventLevel_1 = require("./EventLevel");
class EventSpace {
    constructor() {
        this._eventLevel = new EventLevel_1.EventLevel();
        this.receive = (eventName, listener) => {
            this._eventLevel
                .getChild(EventSpace.convertEventNameType(eventName), true)
                .receivers.add(listener);
            return listener;
        };
        this.on = this.receive;
        this.receiveOnce = (eventName, listener) => {
            const level = this._eventLevel.getChild(EventSpace.convertEventNameType(eventName), true);
            level.receivers.add(function once(data) {
                listener(data);
                level.receivers.delete(once);
            });
            return listener;
        };
        this.once = this.receiveOnce;
        this.cancel = (eventName = [], lrc = true) => {
            const level = this._eventLevel.getChild(EventSpace.convertEventNameType(eventName), false);
            if (level !== undefined) {
                if (lrc === true) {
                    level.receivers.clear();
                    level.children.clear();
                }
                else if (lrc === false) {
                    level.receivers.clear();
                }
                else {
                    level.receivers.delete(lrc);
                }
            }
        };
        this.off = this.cancel;
        this.cancelReverse = (eventName) => {
            let level = this._eventLevel;
            level.receivers.clear();
            for (const currentName of EventSpace.convertEventNameType(eventName)) {
                const currentLevel = level.children.get(currentName);
                if (currentLevel !== undefined) {
                    currentLevel.receivers.clear();
                    level = currentLevel;
                }
                else {
                    return;
                }
            }
        };
        this.offReverse = this.cancelReverse;
        this.trigger = (eventName, data, includeChildren = true, asynchronous) => {
            const level = this._eventLevel.getChild(EventSpace.convertEventNameType(eventName), false);
            if (level !== undefined) {
                level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
                if (includeChildren) {
                    function triggerChildren(level) {
                        level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
                        level.children.forEach(triggerChildren);
                    }
                    level.children.forEach(triggerChildren);
                }
            }
        };
        this.send = this.trigger;
        this.triggerReverse = (eventName, data, asynchronous) => {
            let level = this._eventLevel;
            level.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
            for (const currentName of EventSpace.convertEventNameType(eventName)) {
                const currentLevel = level.children.get(currentName);
                if (currentLevel !== undefined) {
                    currentLevel.receivers.forEach(item => asynchronous ? setTimeout(item, 0, data) : item(data));
                    level = currentLevel;
                }
                else {
                    return;
                }
            }
        };
        this.sendReverse = this.triggerReverse;
        this.has = (eventName, lrc = true) => {
            const level = this._eventLevel.getChild(EventSpace.convertEventNameType(eventName), false);
            if (level === undefined) {
                return false;
            }
            else {
                if (lrc === true) {
                    function checkChildren(level) {
                        if (level.receivers.size > 0)
                            return true;
                        else {
                            for (const item of level.children.values()) {
                                if (checkChildren(item))
                                    return true;
                            }
                            return false;
                        }
                    }
                    return checkChildren(level);
                }
                else if (lrc === false) {
                    return level.receivers.size > 0;
                }
                else {
                    return level.receivers.has(lrc);
                }
            }
        };
        this.hasReverse = (eventName) => {
            let level = this._eventLevel;
            if (level.receivers.size > 0) {
                return true;
            }
            else {
                for (const currentName of EventSpace.convertEventNameType(eventName)) {
                    const currentLevel = level.children.get(currentName);
                    if (currentLevel !== undefined) {
                        if (currentLevel.receivers.size > 0)
                            return true;
                    }
                    else {
                        return false;
                    }
                    level = currentLevel;
                }
                return false;
            }
        };
    }
    /**
     * 将事件名转换成数组的形式
     * @param eventName 事件名称
     */
    static convertEventNameType(eventName) {
        return Array.isArray(eventName) ? eventName : eventName.split('.');
    }
}
exports.EventSpace = EventSpace;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ25FLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUNyRCxFQUFFLENBQUMsQ0FBQyxZQUFZLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQzt3QkFDN0IsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDOzRCQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNwQixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUM7b0JBQ2pCLENBQUM7b0JBQ0QsS0FBSyxHQUFHLFlBQVksQ0FBQztnQkFDekIsQ0FBQztnQkFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2pCLENBQUM7UUFDTCxDQUFDLENBQUE7SUFDTCxDQUFDO0lBMUlHOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxTQUE0QjtRQUNwRCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2RSxDQUFDO0NBb0lKO0FBM0lELGdDQTJJQyIsImZpbGUiOiJjbGFzc2VzL0V2ZW50U3BhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudFNwYWNlVHlwZSB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcy9FdmVudFNwYWNlVHlwZSc7XHJcbmltcG9ydCB7IEV2ZW50TGV2ZWwgfSBmcm9tIFwiLi9FdmVudExldmVsXCI7XHJcbmltcG9ydCB7IExpc3RlbmVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9MaXN0ZW5lclR5cGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50U3BhY2UgaW1wbGVtZW50cyBFdmVudFNwYWNlVHlwZSB7XHJcbiAgICAvKipcclxuICAgICAqIOWwhuS6i+S7tuWQjei9rOaNouaIkOaVsOe7hOeahOW9ouW8j1xyXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSDkuovku7blkI3np7BcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZTogc3RyaW5nIHwgc3RyaW5nW10pIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShldmVudE5hbWUpID8gZXZlbnROYW1lIDogZXZlbnROYW1lLnNwbGl0KCcuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZXZlbnRMZXZlbCA9IG5ldyBFdmVudExldmVsKCk7XHJcblxyXG4gICAgcmVjZWl2ZSA9IDxUIGV4dGVuZHMgTGlzdGVuZXI+KGV2ZW50TmFtZTogc3RyaW5nIHwgc3RyaW5nW10sIGxpc3RlbmVyOiBUKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRMZXZlbFxyXG4gICAgICAgICAgICAuZ2V0Q2hpbGQoRXZlbnRTcGFjZS5jb252ZXJ0RXZlbnROYW1lVHlwZShldmVudE5hbWUpLCB0cnVlKVxyXG4gICAgICAgICAgICAucmVjZWl2ZXJzLmFkZChsaXN0ZW5lcik7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0ZW5lcjtcclxuICAgIH1cclxuICAgIG9uID0gdGhpcy5yZWNlaXZlO1xyXG5cclxuICAgIHJlY2VpdmVPbmNlID0gPFQgZXh0ZW5kcyBMaXN0ZW5lcj4oZXZlbnROYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSwgbGlzdGVuZXI6IFQpID0+IHtcclxuICAgICAgICBjb25zdCBsZXZlbCA9IHRoaXMuX2V2ZW50TGV2ZWwuZ2V0Q2hpbGQoRXZlbnRTcGFjZS5jb252ZXJ0RXZlbnROYW1lVHlwZShldmVudE5hbWUpLCB0cnVlKTtcclxuICAgICAgICBsZXZlbC5yZWNlaXZlcnMuYWRkKGZ1bmN0aW9uIG9uY2UoZGF0YSkge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcihkYXRhKTtcclxuICAgICAgICAgICAgbGV2ZWwucmVjZWl2ZXJzLmRlbGV0ZShvbmNlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xyXG4gICAgfVxyXG4gICAgb25jZSA9IHRoaXMucmVjZWl2ZU9uY2U7XHJcblxyXG4gICAgY2FuY2VsID0gKGV2ZW50TmFtZTogc3RyaW5nIHwgc3RyaW5nW10gPSBbXSwgbHJjOiBib29sZWFuIHwgTGlzdGVuZXIgPSB0cnVlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbGV2ZWwgPSB0aGlzLl9ldmVudExldmVsLmdldENoaWxkKEV2ZW50U3BhY2UuY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lKSwgZmFsc2UpO1xyXG4gICAgICAgIGlmIChsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmIChscmMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGxldmVsLnJlY2VpdmVycy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwuY2hpbGRyZW4uY2xlYXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChscmMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXZlbC5yZWNlaXZlcnMuY2xlYXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldmVsLnJlY2VpdmVycy5kZWxldGUobHJjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9mZiA9IHRoaXMuY2FuY2VsO1xyXG5cclxuICAgIGNhbmNlbFJldmVyc2UgPSAoZXZlbnROYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgIGxldCBsZXZlbCA9IHRoaXMuX2V2ZW50TGV2ZWw7XHJcbiAgICAgICAgbGV2ZWwucmVjZWl2ZXJzLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY3VycmVudE5hbWUgb2YgRXZlbnRTcGFjZS5jb252ZXJ0RXZlbnROYW1lVHlwZShldmVudE5hbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRMZXZlbCA9IGxldmVsLmNoaWxkcmVuLmdldChjdXJyZW50TmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50TGV2ZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudExldmVsLnJlY2VpdmVycy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvZmZSZXZlcnNlID0gdGhpcy5jYW5jZWxSZXZlcnNlO1xyXG5cclxuICAgIHRyaWdnZXIgPSAoZXZlbnROYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSwgZGF0YT86IGFueSwgaW5jbHVkZUNoaWxkcmVuOiBib29sZWFuID0gdHJ1ZSwgYXN5bmNocm9ub3VzPzogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5fZXZlbnRMZXZlbC5nZXRDaGlsZChFdmVudFNwYWNlLmNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSksIGZhbHNlKTtcclxuICAgICAgICBpZiAobGV2ZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXZlbC5yZWNlaXZlcnMuZm9yRWFjaChpdGVtID0+IGFzeW5jaHJvbm91cyA/IHNldFRpbWVvdXQoaXRlbSwgMCwgZGF0YSkgOiBpdGVtKGRhdGEpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbmNsdWRlQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRyaWdnZXJDaGlsZHJlbihsZXZlbDogRXZlbnRMZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsLnJlY2VpdmVycy5mb3JFYWNoKGl0ZW0gPT4gYXN5bmNocm9ub3VzID8gc2V0VGltZW91dChpdGVtLCAwLCBkYXRhKSA6IGl0ZW0oZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsLmNoaWxkcmVuLmZvckVhY2godHJpZ2dlckNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldmVsLmNoaWxkcmVuLmZvckVhY2godHJpZ2dlckNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNlbmQgPSB0aGlzLnRyaWdnZXI7XHJcblxyXG4gICAgdHJpZ2dlclJldmVyc2UgPSAoZXZlbnROYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSwgZGF0YT86IGFueSwgYXN5bmNocm9ub3VzPzogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGxldCBsZXZlbCA9IHRoaXMuX2V2ZW50TGV2ZWw7XHJcbiAgICAgICAgbGV2ZWwucmVjZWl2ZXJzLmZvckVhY2goaXRlbSA9PiBhc3luY2hyb25vdXMgPyBzZXRUaW1lb3V0KGl0ZW0sIDAsIGRhdGEpIDogaXRlbShkYXRhKSk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY3VycmVudE5hbWUgb2YgRXZlbnRTcGFjZS5jb252ZXJ0RXZlbnROYW1lVHlwZShldmVudE5hbWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRMZXZlbCA9IGxldmVsLmNoaWxkcmVuLmdldChjdXJyZW50TmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50TGV2ZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudExldmVsLnJlY2VpdmVycy5mb3JFYWNoKGl0ZW0gPT4gYXN5bmNocm9ub3VzID8gc2V0VGltZW91dChpdGVtLCAwLCBkYXRhKSA6IGl0ZW0oZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZW5kUmV2ZXJzZSA9IHRoaXMudHJpZ2dlclJldmVyc2U7XHJcblxyXG4gICAgaGFzID0gKGV2ZW50TmFtZTogc3RyaW5nIHwgc3RyaW5nW10sIGxyYzogYm9vbGVhbiB8IExpc3RlbmVyID0gdHJ1ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5fZXZlbnRMZXZlbC5nZXRDaGlsZChFdmVudFNwYWNlLmNvbnZlcnRFdmVudE5hbWVUeXBlKGV2ZW50TmFtZSksIGZhbHNlKTtcclxuICAgICAgICBpZiAobGV2ZWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGxyYyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tDaGlsZHJlbihsZXZlbDogRXZlbnRMZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbC5yZWNlaXZlcnMuc2l6ZSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGV2ZWwuY2hpbGRyZW4udmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0NoaWxkcmVuKGl0ZW0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrQ2hpbGRyZW4obGV2ZWwpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxyYyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsZXZlbC5yZWNlaXZlcnMuc2l6ZSA+IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV2ZWwucmVjZWl2ZXJzLmhhcyhscmMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhc1JldmVyc2UgPSAoZXZlbnROYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgIGxldCBsZXZlbCA9IHRoaXMuX2V2ZW50TGV2ZWw7XHJcbiAgICAgICAgaWYgKGxldmVsLnJlY2VpdmVycy5zaXplID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGN1cnJlbnROYW1lIG9mIEV2ZW50U3BhY2UuY29udmVydEV2ZW50TmFtZVR5cGUoZXZlbnROYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudExldmVsID0gbGV2ZWwuY2hpbGRyZW4uZ2V0KGN1cnJlbnROYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGV2ZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGV2ZWwucmVjZWl2ZXJzLnNpemUgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==
