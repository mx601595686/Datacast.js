"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class EventLevel {
    constructor() {
        this._receivers = [];
        this._children = new Map();
    }
    addReceiver(levelNameArray, receiver) {
        let level = this;
        for (const currentName of levelNameArray) {
            const nextLevel = level._children.get(currentName);
            if (nextLevel === undefined) {
                level = new EventLevel();
                level._children.set(currentName, level);
            }
            else {
                level = nextLevel;
            }
        }
        level._receivers.push(receiver);
    }
    removeReceiver(levelNameArray) {
        let level = this;
        for (const item of levelNameArray) {
            level = level._children.get(item);
            if (level === undefined)
                break;
        }
        if (level !== undefined) {
            this._receivers.length = 0;
            this._children.clear();
        }
    }
    hasReceiver(levelNameArray) {
        let level = this;
        for (const item of levelNameArray) {
            level = level._children.get(item);
            if (level === undefined)
                break;
        }
        if (level !== undefined) {
            return this._receivers.length > 0 || this._children.size > 0;
        }
        else {
            return false;
        }
    }
    trigger(levelNameArray, data) {
        if (levelNameArray.length === 0) {
            this._receivers.forEach(function (item) {
                item(data);
            });
            this._children.forEach(function (child) {
                child.trigger(levelNameArray, data);
            });
        }
        else {
            const currentName = levelNameArray.shift();
            const level = this._children.get(currentName);
            if (level !== undefined)
                level.trigger(levelNameArray, data);
        }
    }
    ;
}
exports.EventLevel = EventLevel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzNDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzlDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7Z0JBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakUsQ0FBQztJQUNMLENBQUM7SUFBQSxDQUFDO0NBQ0w7QUFuRkQsZ0NBbUZDIiwiZmlsZSI6IkV2ZW50TGV2ZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5o6l5pS25Zmo5Zue6LCD5Ye95pWwXHJcbiAqL1xyXG5leHBvcnQgdHlwZSByZWNlaXZlciA9IChkYXRhPzogYW55LCBldmVudE5hbWU/OiBzdHJpbmdbXSkgPT4gdm9pZDtcclxuXHJcbi8qKlxyXG4gKiDkuovku7blsYLnuqfnsbtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFdmVudExldmVsIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZWNlaXZlcnM6IHJlY2VpdmVyW10gPSBbXTsgLy/lvZPliY3lsYLnuqfnmoTmjqXmlLblmahcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NoaWxkcmVuID0gbmV3IE1hcDxzdHJpbmcsIEV2ZW50TGV2ZWw+KCk7ICAgLy/lrZDlsYLnuqcsIGtleTrlrZDlsYLnuqflkI3np7BcclxuXHJcbiAgICAvKipcclxuICAgICAqIOa3u+WKoOaOpeaUtuWZqFxyXG4gICAgICogQHBhcmFtIGxldmVsTmFtZUFycmF5IOS6i+S7tuWxgue6p+WQjeWtl+aVsOe7hFxyXG4gICAgICogQHBhcmFtIHJlY2VpdmVyIOebkeWQrOWZqFxyXG4gICAgICovXHJcbiAgICBhZGRSZWNlaXZlcihsZXZlbE5hbWVBcnJheTogc3RyaW5nW10sIHJlY2VpdmVyOiByZWNlaXZlcikgeyAgLy/mt7vliqDmlrDnmoTnm5HlkKzlmahcclxuICAgICAgICBsZXQgbGV2ZWw6IEV2ZW50TGV2ZWwgPSB0aGlzOyAgIC8v5p+l6K+i5Yiw55qE5a+55bqU5bGC57qnXHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY3VycmVudE5hbWUgb2YgbGV2ZWxOYW1lQXJyYXkpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dExldmVsID0gbGV2ZWwuX2NoaWxkcmVuLmdldChjdXJyZW50TmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChuZXh0TGV2ZWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBuZXcgRXZlbnRMZXZlbCgpO1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwuX2NoaWxkcmVuLnNldChjdXJyZW50TmFtZSwgbGV2ZWwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBuZXh0TGV2ZWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldmVsLl9yZWNlaXZlcnMucHVzaChyZWNlaXZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vpmaTmjIflrprlsYLnuqfnmoTkuovku7bnm5HlkKzlmahcclxuICAgICAqIEBwYXJhbSBsZXZlbE5hbWVBcnJheSDlsYLnuqflkI3lrZfmlbDnu4RcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlUmVjZWl2ZXIobGV2ZWxOYW1lQXJyYXk6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgbGV0IGxldmVsOiBFdmVudExldmVsID0gdGhpczsgICAvL+afpeivouWIsOeahOWvueW6lOWxgue6p1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGV2ZWxOYW1lQXJyYXkpIHtcclxuICAgICAgICAgICAgbGV2ZWwgPSBsZXZlbC5fY2hpbGRyZW4uZ2V0KGl0ZW0pO1xyXG4gICAgICAgICAgICBpZiAobGV2ZWwgPT09IHVuZGVmaW5lZCkgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobGV2ZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZWNlaXZlcnMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4uY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTlrprlnKjmjIflrprnmoTkuovku7blsYLnuqfkuIvmmK/lkKbnu5HlrprnmoTmnInnm5HlkKzlmahcclxuICAgICAqIEBwYXJhbSBsZXZlbE5hbWVBcnJheSDlsYLnuqflkI3lrZfmlbDnu4RcclxuICAgICAqL1xyXG4gICAgaGFzUmVjZWl2ZXIobGV2ZWxOYW1lQXJyYXk6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGxldmVsOiBFdmVudExldmVsID0gdGhpczsgICAvL+afpeivouWIsOeahOWvueW6lOWxgue6p1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbGV2ZWxOYW1lQXJyYXkpIHtcclxuICAgICAgICAgICAgbGV2ZWwgPSBsZXZlbC5fY2hpbGRyZW4uZ2V0KGl0ZW0pO1xyXG4gICAgICAgICAgICBpZiAobGV2ZWwgPT09IHVuZGVmaW5lZCkgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobGV2ZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjZWl2ZXJzLmxlbmd0aCA+IDAgfHwgdGhpcy5fY2hpbGRyZW4uc2l6ZSA+IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOinpuWPkeaJgOacieaMh+Wumue6p+WIq+S7peWPiuWtkOe6p+eahOebkeWQrOWZqFxyXG4gICAgICogQHBhcmFtIGxldmVsTmFtZUFycmF5IOS6i+S7tuWxgue6p+WQjeWtl+aVsOe7hFxyXG4gICAgICogQHBhcmFtIGRhdGEg6KaB57uZ6Kem5Y+R55qE5pa55rOV5Lyg6YCS55qE5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXIobGV2ZWxOYW1lQXJyYXk6IHN0cmluZ1tdLCBkYXRhOiBhbnkpIHtcclxuICAgICAgICBpZiAobGV2ZWxOYW1lQXJyYXkubGVuZ3RoID09PSAwKSB7ICAvL+aYr+S4jeaYr+acgOWQjuS4gOe6p+S6hizpgY3ljoblvZPliY3nuqfliKvlkozlrZDnuqdcclxuICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0oZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLnRyaWdnZXIobGV2ZWxOYW1lQXJyYXksIGRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TmFtZSA9IGxldmVsTmFtZUFycmF5LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5fY2hpbGRyZW4uZ2V0KGN1cnJlbnROYW1lKTtcclxuICAgICAgICAgICAgaWYgKGxldmVsICE9PSB1bmRlZmluZWQpIGxldmVsLnRyaWdnZXIobGV2ZWxOYW1lQXJyYXksIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0iXX0=
