"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 事件层级类
 */
class EventLevel {
    constructor() {
        this._receivers = new Set(); //当前层级的事件监听器
        this._children = new Map(); //子层级, key:子层级名称
    }
    getLevel(levelNameArray, autoCreateLevel = false) {
        let level = this;
        for (const currentName of levelNameArray) {
            let currentLevel = level._children.get(currentName);
            if (currentLevel === undefined) {
                if (autoCreateLevel) {
                    currentLevel = new EventLevel();
                    level._children.set(currentName, currentLevel);
                }
                else {
                    return undefined;
                }
            }
            level = currentLevel;
        }
        return level;
    }
    /**
     * 添加事件监听器
     * @param levelNameArray 事件层级名称数组
     * @param receiver 事件监听器
     */
    addReceiver(levelNameArray, receiver) {
        this.getLevel(levelNameArray, true)._receivers.add(receiver);
    }
    removeReceiver(levelNameArray, receiver) {
        const level = this.getLevel(levelNameArray);
        if (level !== undefined) {
            if (receiver !== undefined)
                level._receivers.delete(receiver);
            else {
                level._receivers.clear();
                level._children.clear();
            }
        }
    }
    hasReceiver(levelNameArray, arg) {
        const level = this.getLevel(levelNameArray);
        if (level === undefined) {
            return false;
        }
        else {
            if (arg === undefined) {
                return level._receivers.size > 0;
            }
            else if (arg === true) {
                const checkChildren = (level) => {
                    if (level._receivers.size > 0)
                        return true;
                    else {
                        for (const item of level._children.values()) {
                            if (checkChildren(item) === true)
                                return true;
                        }
                        return false;
                    }
                };
                return checkChildren(level);
            }
            else {
                return level._receivers.has(arg);
            }
        }
    }
    /**
     * 触发指定级别以及其子级的事件监听器
     * @param levelNameArray 事件层级名称数组
     * @param data 要给触发的事件监听器传递的数据
     */
    trigger(levelNameArray, data) {
        const level = this.getLevel(levelNameArray);
        if (level !== undefined) {
            const triggerChildren = (level) => {
                level._receivers.forEach(item => item(data));
                level._children.forEach(triggerChildren);
            };
            triggerChildren(level);
        }
    }
}
exports.EventLevel = EventLevel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
