"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 事件层级类
 */
class EventLevel {
    constructor() {
        this._receivers = new Set(); //当前层级的事件监听器
        this._children = new Map(); //子层级, key:子层级名称
    }
    getLevel(levelNameArray, autoCreateLevel = false) {
        let level = this;
        for (const currentName of levelNameArray) {
            let currentLevel = level._children.get(currentName);
            if (currentLevel === undefined) {
                if (autoCreateLevel) {
                    currentLevel = new EventLevel();
                    level._children.set(currentName, currentLevel);
                }
                else {
                    return undefined;
                }
            }
            level = currentLevel;
        }
        return level;
    }
    /**
     * 添加事件监听器
     * @param levelNameArray 事件层级名称数组
     * @param receiver 事件监听器
     */
    addReceiver(levelNameArray, receiver) {
        this.getLevel(levelNameArray, true)._receivers.add(receiver);
    }
    removeReceiver(levelNameArray, receiver) {
        const level = this.getLevel(levelNameArray);
        if (level !== undefined) {
            if (receiver !== undefined)
                level._receivers.delete(receiver);
            else {
                level._receivers.clear();
                level._children.clear();
            }
        }
    }
    /**
     * 触发指定级别以及其子级的事件监听器
     * @param levelNameArray 事件层级名称数组
     * @param data 要给触发的事件监听器传递的数据
     */
    trigger(levelNameArray, data) {
        const level = this.getLevel(levelNameArray);
        if (level !== undefined) {
            const triggerChildren = (level) => {
                level._receivers.forEach(item => item(data));
                level._children.forEach(triggerChildren);
            };
            triggerChildren(level);
        }
    }
}
exports.EventLevel = EventLevel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50TGV2ZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQTs7R0FFRztBQUNIO0lBQUE7UUFFcUIsZUFBVSxHQUFrQixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQWEsWUFBWTtRQUMvRCxjQUFTLEdBQTRCLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBSSxnQkFBZ0I7SUFtRnhGLENBQUM7SUF2RUcsUUFBUSxDQUFDLGNBQXdCLEVBQUUsa0JBQTJCLEtBQUs7UUFDL0QsSUFBSSxLQUFLLEdBQWUsSUFBSSxDQUFDO1FBRTdCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sV0FBVyxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFcEQsRUFBRSxDQUFDLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLFlBQVksR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO29CQUNoQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQ25ELENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osTUFBTSxDQUFDLFNBQVMsQ0FBQztnQkFDckIsQ0FBQztZQUNMLENBQUM7WUFFRCxLQUFLLEdBQUcsWUFBWSxDQUFDO1FBQ3pCLENBQUM7UUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsV0FBVyxDQUFDLGNBQXdCLEVBQUUsUUFBa0I7UUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBYUQsY0FBYyxDQUFDLGNBQXdCLEVBQUUsUUFBbUI7UUFDeEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUU1QyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN0QixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDO2dCQUN2QixLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsQ0FBQztnQkFDRixLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUN6QixLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzVCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxPQUFPLENBQUMsY0FBd0IsRUFBRSxJQUFTO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFNUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFpQjtnQkFDdEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM3QyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUE7WUFFRCxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQztJQUNMLENBQUM7Q0FDSjtBQXRGRCxnQ0FzRkMiLCJmaWxlIjoiRXZlbnRMZXZlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDkuovku7bnm5HlkKzlmajlm57osIPlh73mlbBcclxuICovXHJcbmV4cG9ydCB0eXBlIHJlY2VpdmVyID0gKGRhdGE/OiBhbnkpID0+IGFueTtcclxuXHJcbi8qKlxyXG4gKiDkuovku7blsYLnuqfnsbtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFdmVudExldmVsIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZWNlaXZlcnM6IFNldDxyZWNlaXZlcj4gPSBuZXcgU2V0KCk7ICAgICAgICAgICAgIC8v5b2T5YmN5bGC57qn55qE5LqL5Lu255uR5ZCs5ZmoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jaGlsZHJlbjogTWFwPHN0cmluZywgRXZlbnRMZXZlbD4gPSBuZXcgTWFwKCk7ICAgIC8v5a2Q5bGC57qnLCBrZXk65a2Q5bGC57qn5ZCN56ewXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmjIflrprlsYLnuqfvvIzlpoLmnpzkuI3lrZjlnKjlsLHov5Tlm57nqbpcclxuICAgICAqIEBwYXJhbSBsZXZlbE5hbWVBcnJheSDkuovku7blsYLnuqflkI3np7DmlbDnu4RcclxuICAgICAqL1xyXG4gICAgZ2V0TGV2ZWwobGV2ZWxOYW1lQXJyYXk6IHN0cmluZ1tdLCBhdXRvQ3JlYXRlTGV2ZWw/OiBmYWxzZSk6IEV2ZW50TGV2ZWwgfCB1bmRlZmluZWRcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5oyH5a6a5bGC57qn77yM5aaC5p6c5LiN5a2Y5Zyo5bCx6Ieq5Yqo5Yib5bu6XHJcbiAgICAgKiBAcGFyYW0gbGV2ZWxOYW1lQXJyYXkg5LqL5Lu25bGC57qn5ZCN56ew5pWw57uEXHJcbiAgICAgKi9cclxuICAgIGdldExldmVsKGxldmVsTmFtZUFycmF5OiBzdHJpbmdbXSwgYXV0b0NyZWF0ZUxldmVsPzogdHJ1ZSk6IEV2ZW50TGV2ZWxcclxuICAgIGdldExldmVsKGxldmVsTmFtZUFycmF5OiBzdHJpbmdbXSwgYXV0b0NyZWF0ZUxldmVsOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBsZXQgbGV2ZWw6IEV2ZW50TGV2ZWwgPSB0aGlzOyAgIFxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGN1cnJlbnROYW1lIG9mIGxldmVsTmFtZUFycmF5KSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50TGV2ZWwgPSBsZXZlbC5fY2hpbGRyZW4uZ2V0KGN1cnJlbnROYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50TGV2ZWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGF1dG9DcmVhdGVMZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IG5ldyBFdmVudExldmVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWwuX2NoaWxkcmVuLnNldChjdXJyZW50TmFtZSwgY3VycmVudExldmVsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGV2ZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDkuovku7bnm5HlkKzlmahcclxuICAgICAqIEBwYXJhbSBsZXZlbE5hbWVBcnJheSDkuovku7blsYLnuqflkI3np7DmlbDnu4RcclxuICAgICAqIEBwYXJhbSByZWNlaXZlciDkuovku7bnm5HlkKzlmahcclxuICAgICAqL1xyXG4gICAgYWRkUmVjZWl2ZXIobGV2ZWxOYW1lQXJyYXk6IHN0cmluZ1tdLCByZWNlaXZlcjogcmVjZWl2ZXIpIHtcclxuICAgICAgICB0aGlzLmdldExldmVsKGxldmVsTmFtZUFycmF5LCB0cnVlKS5fcmVjZWl2ZXJzLmFkZChyZWNlaXZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vpmaTmjIflrprlsYLnuqfkuIrnmoTmiYDmnInnm5HlkKzlmahcclxuICAgICAqIEBwYXJhbSBsZXZlbE5hbWVBcnJheSDlsYLnuqflkI3np7DmlbDnu4RcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlUmVjZWl2ZXIobGV2ZWxOYW1lQXJyYXk6IHN0cmluZ1tdKTogdm9pZFxyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vpmaTmjIflrprlsYLnuqfkuIrnmoTnibnlrprnm5HlkKzlmahcclxuICAgICAqIEBwYXJhbSBsZXZlbE5hbWVBcnJheSDlsYLnuqflkI3np7DmlbDnu4RcclxuICAgICAqIEBwYXJhbSByZWNlaXZlciDopoHnp7vpmaTnmoTnm5HlkKzlmahcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlUmVjZWl2ZXIobGV2ZWxOYW1lQXJyYXk6IHN0cmluZ1tdLCByZWNlaXZlcjogcmVjZWl2ZXIpOiB2b2lkXHJcbiAgICByZW1vdmVSZWNlaXZlcihsZXZlbE5hbWVBcnJheTogc3RyaW5nW10sIHJlY2VpdmVyPzogcmVjZWl2ZXIpIHtcclxuICAgICAgICBjb25zdCBsZXZlbCA9IHRoaXMuZ2V0TGV2ZWwobGV2ZWxOYW1lQXJyYXkpO1xyXG5cclxuICAgICAgICBpZiAobGV2ZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAocmVjZWl2ZXIgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIGxldmVsLl9yZWNlaXZlcnMuZGVsZXRlKHJlY2VpdmVyKTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXZlbC5fcmVjZWl2ZXJzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBsZXZlbC5fY2hpbGRyZW4uY2xlYXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOinpuWPkeaMh+Wumue6p+WIq+S7peWPiuWFtuWtkOe6p+eahOS6i+S7tuebkeWQrOWZqFxyXG4gICAgICogQHBhcmFtIGxldmVsTmFtZUFycmF5IOS6i+S7tuWxgue6p+WQjeensOaVsOe7hFxyXG4gICAgICogQHBhcmFtIGRhdGEg6KaB57uZ6Kem5Y+R55qE5LqL5Lu255uR5ZCs5Zmo5Lyg6YCS55qE5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXIobGV2ZWxOYW1lQXJyYXk6IHN0cmluZ1tdLCBkYXRhOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBsZXZlbCA9IHRoaXMuZ2V0TGV2ZWwobGV2ZWxOYW1lQXJyYXkpO1xyXG5cclxuICAgICAgICBpZiAobGV2ZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCB0cmlnZ2VyQ2hpbGRyZW4gPSAobGV2ZWw6IEV2ZW50TGV2ZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldmVsLl9yZWNlaXZlcnMuZm9yRWFjaChpdGVtID0+IGl0ZW0oZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwuX2NoaWxkcmVuLmZvckVhY2godHJpZ2dlckNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJpZ2dlckNoaWxkcmVuKGxldmVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=
